// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package TaskCore

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TaskCoreABI is the input ABI used to generate the binding from.
const TaskCoreABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_taskId\",\"type\":\"uint256\"}],\"name\":\"withdrawVoteReward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_taskName\",\"type\":\"string\"},{\"name\":\"_content\",\"type\":\"string\"},{\"name\":\"_detailContentHash\",\"type\":\"string\"},{\"name\":\"_workerLevel\",\"type\":\"uint256\"}],\"name\":\"createTask\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_taskId\",\"type\":\"uint256\"}],\"name\":\"acceptTask\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_taskId\",\"type\":\"uint256\"},{\"name\":\"_workerProof\",\"type\":\"string\"}],\"name\":\"workerAddDeposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_taskId\",\"type\":\"uint256\"},{\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"name\":\"_numvotes\",\"type\":\"uint256\"}],\"name\":\"voteForTask\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"registerUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"setSecondsPerBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_taskId\",\"type\":\"uint256\"},{\"name\":\"_winChoice\",\"type\":\"uint256\"}],\"name\":\"getTaskReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondsPerBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"taskIndexToRequester\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"intervalBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_taskId\",\"type\":\"uint256\"}],\"name\":\"GetTaskInfo_1\",\"outputs\":[{\"name\":\"taskName\",\"type\":\"string\"},{\"name\":\"content\",\"type\":\"string\"},{\"name\":\"detailContentHash\",\"type\":\"string\"},{\"name\":\"workerLevel\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"totalWeiPaid\",\"type\":\"uint256\"},{\"name\":\"taskRewardWei\",\"type\":\"uint256\"},{\"name\":\"resultHash\",\"type\":\"string\"},{\"name\":\"createTime\",\"type\":\"uint256\"},{\"name\":\"createBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_taskId\",\"type\":\"uint256\"},{\"name\":\"_requesterProof\",\"type\":\"string\"}],\"name\":\"proposeToVote\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_taskId\",\"type\":\"uint256\"}],\"name\":\"addMoneyForReward\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"taskIdToWorker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"registerTime\",\"type\":\"uint256\"},{\"name\":\"acceptedWork\",\"type\":\"uint256\"},{\"name\":\"workScore\",\"type\":\"uint256\"},{\"name\":\"finishedWork\",\"type\":\"uint256\"},{\"name\":\"voteWin\",\"type\":\"uint256\"},{\"name\":\"voteRewardFee\",\"type\":\"uint256\"},{\"name\":\"candidateAsWorker\",\"type\":\"uint256\"},{\"name\":\"candidateAsRequester\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_taskId\",\"type\":\"uint256\"},{\"name\":\"_score\",\"type\":\"uint256\"}],\"name\":\"settlementTask\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_taskId\",\"type\":\"uint256\"}],\"name\":\"getTaskVoteAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_taskId\",\"type\":\"uint256\"},{\"name\":\"_resHash\",\"type\":\"string\"}],\"name\":\"submitTaskResult\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"getWorkerLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_taskId\",\"type\":\"uint256\"},{\"name\":\"_vote\",\"type\":\"uint256\"},{\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"revealVoteForTask\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_taskId\",\"type\":\"uint256\"}],\"name\":\"withdrawTaskReward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"CreateTask\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RegisterUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"acceptwork\",\"type\":\"uint256\"}],\"name\":\"AcceptWork\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"finishedwork\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"workscore\",\"type\":\"uint256\"}],\"name\":\"FinishWork\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"worker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"AcceptTask\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"worker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"resultHash\",\"type\":\"string\"}],\"name\":\"SubmitTaskResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"SettlementTask\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"vote\",\"type\":\"address\"}],\"name\":\"ProposeToVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"vote\",\"type\":\"address\"}],\"name\":\"WorkerAddDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"}]"

// TaskCoreBin is the compiled bytecode used for deploying new contracts.
var TaskCoreBin = "0x608060405260008054600f60015560028055600160a860020a03191633179055614afb8061002e6000396000f300608060405260043610620001615763ffffffff60e060020a6000350416630a0f81688114620001665780630b39d714146200019a578063103099f314620001c95780631bf6912d146200021957806323c96d38146200023457806327d7874c14620002895780633f4ba83a14620002ad5780634a9ec1ba14620002c55780634d3820eb14620002d85780635663896e14620002f05780635c975abb146200030b57806375058f3314620003235780637a7d493714620003645780638044c8c8146200037c5780638456cb5914620003975780638f54be0e14620003af57806390d0cab414620003c757806392b5ff7214620005d45780639e2b841114620005ed578063a5eab62d14620005fa578063a87430ba1462000615578063e48be048146200067a578063ec0153db146200068a578063ec824f6a14620006a5578063efcff56c14620006cc578063f05da2fa14620006f0578063f307655b1462000711575b600080fd5b3480156200017357600080fd5b506200017e6200072c565b60408051600160a060020a039092168252519081900360200190f35b348015620001a757600080fd5b50620001b56004356200073b565b604080519115158252519081900360200190f35b348015620001d657600080fd5b50620002076024600480358281019290820135918135808301929082013591604435918201910135606435620008f3565b60408051918252519081900360200190f35b3480156200022657600080fd5b50620001b5600435620009f1565b60408051602060046024803582810135601f81018590048502860185019096528585526200028795833595369560449491939091019190819084018382808284375094975062000a579650505050505050565b005b3480156200029657600080fd5b5062000287600160a060020a036004351662000ac4565b348015620002ba57600080fd5b506200028762000b21565b620001b560043560243560443562000b72565b348015620002e557600080fd5b506200028762000de8565b348015620002fd57600080fd5b506200028760043562000df5565b3480156200031857600080fd5b50620001b562000e12565b3480156200033057600080fd5b506200034160043560243562000e22565b60408051600160a060020a03909316835260208301919091528051918290030190f35b3480156200037157600080fd5b506200020762000eae565b3480156200038957600080fd5b506200017e60043562000eb4565b348015620003a457600080fd5b506200028762000ecf565b348015620003bc57600080fd5b506200020762000f25565b348015620003d457600080fd5b50620003e260043562000f2b565b604051808060200180602001806020018b81526020018a60048111156200040557fe5b60ff1681526020018981526020018881526020018060200187815260200186815260200185810385528f818151815260200191508051906020019080838360005b838110156200046057818101518382015260200162000446565b50505050905090810190601f1680156200048e5780820380516001836020036101000a031916815260200191505b5085810384528e818151815260200191508051906020019080838360005b83811015620004c6578181015183820152602001620004ac565b50505050905090810190601f168015620004f45780820380516001836020036101000a031916815260200191505b5085810383528d5181528d516020918201918f019080838360005b83811015620005295781810151838201526020016200050f565b50505050905090810190601f168015620005575780820380516001836020036101000a031916815260200191505b5085810382528851815288516020918201918a019080838360005b838110156200058c57818101518382015260200162000572565b50505050905090810190601f168015620005ba5780820380516001836020036101000a031916815260200191505b509e50505050505050505050505050505060405180910390f35b62000287600480359060248035908101910135620012f9565b6200028760043562001396565b3480156200060757600080fd5b506200017e60043562001471565b3480156200062257600080fd5b5062000639600160a060020a03600435166200148c565b604080519889526020890197909752878701959095526060870193909352608086019190915260a085015260c084015260e083015251908190036101000190f35b62000287600435602435620014d4565b3480156200069757600080fd5b506200017e60043562001531565b348015620006b257600080fd5b506200028760048035906024803590810191013562001566565b348015620006d957600080fd5b5062000207600160a060020a0360043516620015a7565b348015620006fd57600080fd5b506200028760043560243560443562001612565b3480156200071e57600080fd5b50620001b5600435620016b7565b600054600160a060020a031681565b6000806000806000806200074f8762001531565b945084600160a060020a031663e0f721276040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156200079057600080fd5b505af1158015620007a5573d6000803e3d6000fd5b505050506040513d6020811015620007bc57600080fd5b50511515620007cf5760009550620008e9565b604080517faf2287e30000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a0387169163af2287e39160248083019260609291908290030181600087803b1580156200083157600080fd5b505af115801562000846573d6000803e3d6000fd5b505050506040513d60608110156200085d57600080fd5b508051602082015160409092015190955090935091508380156200087e5750825b15620008e45762000890878362001810565b604051909150339082156108fc029083906000818181858888f19350505050158015620008c1573d6000803e3d6000fd5b50620008cd876200195c565b620008da33600a620019b4565b60019550620008e9565b600095505b5050505050919050565b60008054819060a060020a900460ff16156200090e57600080fd5b620009a789898080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f8f018190048102820181019092528d815294508d93508c925082915084018382808284375050604080516020601f8e018190048102820181019092528c815294508c93508b92508291508401838280828437508b9450620019c49350505050565b604080513381526020810183905281519293507fe106c44ddc9830db541afe96867b5528824d1357fcae863825b977d872ebc331929081900390910190a198975050505050505050565b600080620009ff33620015a7565b905060038381548110151562000a1157fe5b9060005260206000209060130201600301548110151562000a4c5762000a378362001cab565b62000a423362001dcc565b6001915062000a51565b600091505b50919050565b600062000a65838362001dda565b905080600160a060020a031663fcd313206040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801562000aa657600080fd5b505af115801562000abb573d6000803e3d6000fd5b50505050505050565b600054600160a060020a0316331462000adc57600080fd5b600160a060020a038116151562000af257600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a0316331462000b3957600080fd5b60005460a060020a900460ff16151562000b5257600080fd5b6000805474ff000000000000000000000000000000000000000019169055565b60008060008060008060008062000b893362001f4b565b9198509650945062000b9b8b62001531565b604080517f83783358000000000000000000000000000000000000000000000000000000008152336004820152602481018a905260448101899052606481018c90528151929450600160a060020a038516926383783358926084808401939192918290030181600087803b15801562000c1357600080fd5b505af115801562000c28573d6000803e3d6000fd5b505050506040513d604081101562000c3f57600080fd5b508051602090910151909450925083158062000c5c575082348601105b1562000c9a5760405133903480156108fc02916000818181858888f1935050505015801562000c8f573d6000803e3d6000fd5b506000975062000dda565b82851062000cef5760405133903480156108fc02916000818181858888f1935050505015801562000ccf573d6000803e3d6000fd5b5062000cdc338462001fd2565b62000ce88b8462001fde565b5062000d4c565b506040518483039033903483900380156108fc02916000818181858888f1935050505015801562000d24573d6000803e3d6000fd5b5062000d31338662001fd2565b62000d3d8b8662001fde565b5062000d4a8b826200205a565b505b604080517f03b8a89f000000000000000000000000000000000000000000000000000000008152336004820152602481018c905263ffffffff8b1660448201529051600160a060020a038416916303b8a89f91606480830192600092919082900301818387803b15801562000dc057600080fd5b505af115801562000dd5573d6000803e3d6000fd5b505050505b505050505050509392505050565b62000df333620020d6565b565b600054600160a060020a0316331462000e0d57600080fd5b600155565b60005460a060020a900460ff1681565b60008082151562000e735760008481526004602052604090205460038054600160a060020a03909216918690811062000e5757fe5b9060005260206000209060130201600601549150915062000ea7565b826001141562000ea75760008481526005602052604090205460038054600160a060020a03909216918690811062000e5757fe5b9250929050565b60015481565b600460205260009081526040902054600160a060020a031681565b600054600160a060020a0316331462000ee757600080fd5b60005460a060020a900460ff161562000eff57600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a179055565b60025481565b6060806060600080600080606060008060038b81548110151562000f4b57fe5b6000918252602091829020601390910201805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529283018282801562000fe25780601f1062000fb65761010080835404028352916020019162000fe2565b820191906000526020600020905b81548152906001019060200180831162000fc457829003601f168201915b5050505050995060038b81548110151562000ff957fe5b90600052602060002090601302016001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015620010a25780601f106200107657610100808354040283529160200191620010a2565b820191906000526020600020905b8154815290600101906020018083116200108457829003601f168201915b5050505050985060038b815481101515620010b957fe5b600091825260209182902060026013909202018101805460408051601f600019610100600186161502019093169490940491820185900485028401850190528083529192909190830182828015620011555780601f10620011295761010080835404028352916020019162001155565b820191906000526020600020905b8154815290600101906020018083116200113757829003601f168201915b5050505050975060038b8154811015156200116c57fe5b906000526020600020906013020160030154965060038b8154811015156200119057fe5b60009182526020909120600460139092020101546003805460ff9092169750908c908110620011bb57fe5b906000526020600020906013020160050154945060038b815481101515620011df57fe5b906000526020600020906013020160060154935060038b8154811015156200120357fe5b6000918252602091829020600760139092020101805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156200129d5780601f1062001271576101008083540402835291602001916200129d565b820191906000526020600020905b8154815290600101906020018083116200127f57829003601f168201915b5050505050925060038b815481101515620012b457fe5b906000526020600020906013020160080154915060038b815481101515620012d857fe5b90600052602060002090601302016009015490509193959799509193959799565b60008060006200130986620021c8565b909350915082826200131a62002ba9565b600160a060020a03928316815291166020820152604080519182900301906000f0801580156200134e573d6000803e3d6000fd5b5090506200138e868287878080601f01602080910402602001604051908101604052809392919081815260200183838082843750620021f4945050505050565b505050505050565b600081815260046020526040902054600160a060020a03163314620013ba57600080fd5b620013f034600383815481101515620013cf57fe5b906000526020600020906013020160050154620023ba90919063ffffffff16565b6003805483908110620013ff57fe5b9060005260206000209060130201600501819055506200144a346003838154811015156200142957fe5b906000526020600020906013020160060154620023ba90919063ffffffff16565b60038054839081106200145957fe5b90600052602060002090601302016006018190555050565b600560205260009081526040902054600160a060020a031681565b60066020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154908060050154908060060154908060070154905088565b600080620014e284620023d8565b6040519193509150600160a060020a0383169082156108fc029083906000818181858888f193505050501580156200151e573d6000803e3d6000fd5b506200152b82846200259b565b50505050565b60006003828154811015156200154357fe5b60009182526020909120601390910201600e0154600160a060020a031692915050565b620015a28383838080601f01602080910402602001604051908101604052809392919081815260200183838082843750620025a7945050505050565b505050565b600160a060020a03811660009081526006602052604081206003015481901515620015d5575060006200160c565b600160a060020a03831660009081526006602052604090206003810154600290910154620016099163ffffffff6200275f16565b90505b92915050565b60006200161f8462001531565b604080517f3932d6b700000000000000000000000000000000000000000000000000000000815233600482015260248101869052604481018590529051919250600160a060020a03831691633932d6b79160648082019260009290919082900301818387803b1580156200169257600080fd5b505af1158015620016a7573d6000803e3d6000fd5b505050506200152b848462002784565b6000806000806000620016ca8662001531565b935083600160a060020a031663e0f721276040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156200170b57600080fd5b505af115801562001720573d6000803e3d6000fd5b505050506040513d60208110156200173757600080fd5b505115156200174a576000945062001807565b83600160a060020a0316639b17a9a16040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156200178957600080fd5b505af11580156200179e573d6000803e3d6000fd5b505050506040513d6020811015620017b557600080fd5b50519250620017c5868462000e22565b6040519193509150600160a060020a0383169082156108fc029083906000818181858888f1935050505015801562001801573d6000803e3d6000fd5b50600194505b50505050919050565b60008060008060006003878154811015156200182857fe5b60009182526020808320338452601260139093020191909101905260409020549350851515620018c25760038054889081106200186157fe5b9060005260206000209060130201600b015492506003878154811015156200188557fe5b9060005260206000209060130201600c0154600388815481101515620018a757fe5b9060005260206000209060130201600d01540191506200192d565b6003805488908110620018d157fe5b9060005260206000209060130201600d01549250600387815481101515620018f557fe5b9060005260206000209060130201600a01546003888154811015156200191757fe5b9060005260206000209060130201600b01540191505b620019518362001944868563ffffffff620028b016565b9063ffffffff6200275f16565b979650505050505050565b6000806200196a83620028e2565b9150620019783383620019b4565b62001983836200294e565b604051909150339082156108fc029083906000818181858888f193505050501580156200152b573d6000803e3d6000fd5b620019c08282620029ba565b5050565b6000620019d062002bba565b6000610220604051908101604052808881526020018781526020018681526020018581526020016000600481111562001a0557fe5b815260006020808301829052604080840183905280518083018252838152606085015267ffffffffffffffff421660808501524360a085015260c0840183905260e0840183905261010084018390526101208401839052610140840183905280518083018252838152610160850152805180830190915282815261018090930192909252600380546001818101808455929093528451805195975092949193879360139092027fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b019262001add928492019062002c54565b50602082810151805162001af8926001850192019062002c54565b506040820151805162001b1691600284019160209091019062002c54565b506060820151816003015560808201518160040160006101000a81548160ff0219169083600481111562001b4657fe5b021790555060a0820151600582015560c0820151600682015560e0820151805162001b7c91600784019160209091019062002c54565b5061010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c8201556101a0820151600d8201556101c0820151600e8201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039092169190911790556101e0820151805162001c1191600f84019160209091019062002c54565b50610200820151805162001c3091601084019160209091019062002c54565b50505003600081815260046020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff191633908117909155825190815290810183905281519293507fe106c44ddc9830db541afe96867b5528824d1357fcae863825b977d872ebc331929081900390910190a15050949350505050565b600254600380548390811062001cbd57fe5b90600052602060002090601302016009015401431015151562001cdf57600080fd5b6000600380548390811062001cf057fe5b60009182526020909120600460139092020181015460ff169081111562001d1357fe5b1462001d1e57600080fd5b6000818152600560205260409020805473ffffffffffffffffffffffffffffffffffffffff19163317905560038054600191908390811062001d5c57fe5b906000526020600020906013020160040160006101000a81548160ff0219169083600481111562001d8957fe5b0217905550604080513381526020810183905281517f2ca8d8b2ebfa0f7ff682ecba96d545fb37dfc0165fd1017b71b1bba6a492ab1a929181900390910190a150565b62001dd78162002a0b565b50565b600060038080548590811062001dec57fe5b60009182526020909120600460139092020181015460ff169081111562001e0f57fe5b1462001e1a57600080fd5b600083815260056020526040902054600160a060020a0316331462001e3e57600080fd5b62001e743460038581548110151562001e5357fe5b9060005260206000209060130201600c0154620023ba90919063ffffffff16565b600380548590811062001e8357fe5b9060005260206000209060130201600c01819055508160038481548110151562001ea957fe5b9060005260206000209060130201601001908051906020019062001ecf92919062002c54565b507fa9f21dcdaf18685f0d457d8d4be1d8cb8bb4fb91ad213d6e8669527abd4f66098360038581548110151562001f0257fe5b6000918252602091829020600e601390920201015460408051938452600160a060020a03909116918301919091528051918290030190a162001f448362001531565b9392505050565b600160a060020a0381166000908152600660205260408120805460058201546003830154600290930154919392909183918291600a919081151562001f8c57fe5b0460140281151562001f9a57fe5b600160a060020a038816600090815260066020526040902060050154919004925060c890601402049050808201935050509193909250565b620019c0828262002a97565b6000620020228260038581548110151562001ff557fe5b60009182526020808320338452601160139093020191909101905260409020549063ffffffff620023ba16565b60038054859081106200203157fe5b600091825260208083203384526011601390930201919091019052604090205550600192915050565b60006200209e826003858154811015156200207157fe5b60009182526020808320338452601260139093020191909101905260409020549063ffffffff620023ba16565b6003805485908110620020ad57fe5b600091825260208083203384526012601390930201919091019052604090205550600192915050565b620020e062002cd9565b600160a060020a038216600090815260066020526040902054156200210457600080fd5b50604080516101008101825242815260006020808301828152838501838152606085018481526080860185815260a0870186815260c0880187815260e08901888152600160a060020a038c16808a526006808a52998c90208b51815597516001890155955160028801559351600387015591516004860155516005850155519483019490945592516007909101558351918252925191927f39e88f253dc4ea790c2b355aec8c5ac86335a9925c3815b62b74bcdfaffe68ec92918290030190a15050565b600090815260046020908152604080832054600590925290912054600160a060020a0391821692911690565b600083815260046020526040902054600160a060020a031633146200221857600080fd5b600160038054859081106200222957fe5b60009182526020909120600460139092020181015460ff16908111156200224c57fe5b146200225757600080fd5b600380848154811015156200226857fe5b906000526020600020906013020160040160006101000a81548160ff021916908360048111156200229557fe5b0217905550620022d034600385815481101515620022af57fe5b9060005260206000209060130201600a0154620023ba90919063ffffffff16565b6003805485908110620022df57fe5b9060005260206000209060130201600a0181905550816003848154811015156200230557fe5b9060005260206000209060130201600e0160006101000a815481600160a060020a030219169083600160a060020a03160217905550806003848154811015156200234b57fe5b9060005260206000209060130201600f0190805190602001906200237192919062002c54565b5060408051848152600160a060020a038416602082015281517f5a0bd4a18fbaced3c711532498d9ad92e848490da3c7697052b1556224f9b9f9929181900390910190a1505050565b600082820183811015620023cd57600080fd5b8091505b5092915050565b6000818152600460205260408120548190600160a060020a03163314620023fe57600080fd5b600260038054859081106200240f57fe5b60009182526020909120600460139092020181015460ff16908111156200243257fe5b146200243d57600080fd5b60008381526005602052604090205460038054600160a060020a03909216935090849081106200246957fe5b9060005260206000209060130201600601549050620024d46003848154811015156200249157fe5b906000526020600020906013020160060154600385815481101515620024b357fe5b90600052602060002090601302016005015462002ac590919063ffffffff16565b6003805485908110620024e357fe5b90600052602060002090601302016005018190555060006003848154811015156200250a57fe5b90600052602060002090601302016006018190555060046003848154811015156200253157fe5b906000526020600020906013020160040160006101000a81548160ff021916908360048111156200255e57fe5b02179055506040805184815290517f86fc46012ecb8f2e23642ea6bc26d510db89e1e5224e88730ce8933ff5be08219181900360200190a1915091565b620019c0828262002add565b60016003805484908110620025b857fe5b60009182526020909120600460139092020181015460ff1690811115620025db57fe5b14620025e657600080fd5b600082815260056020526040902054600160a060020a031633146200260a57600080fd5b806003838154811015156200261b57fe5b906000526020600020906013020160070190805190602001906200264192919062002c54565b5060026003838154811015156200265457fe5b906000526020600020906013020160040160006101000a81548160ff021916908360048111156200268157fe5b02179055506000828152600460209081526040808320548151600160a060020a039091168082523382850181905292820187905260806060830181815287519184019190915286517fd16e1b4933a2b42802dd3a6ee3f5d017a655f5b0059a8a777287ee5855525d649692958994899490939260a08501928601918190849084905b838110156200271d57818101518382015260200162002703565b50505050905090810190601f1680156200274b5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15050565b6000808083116200276f57600080fd5b82848115156200277b57fe5b04949350505050565b8015156200281a57620027f0600383815481101515620027a057fe5b60009182526020808320338452601260139093020191909101905260409020546003805485908110620027cf57fe5b9060005260206000209060130201600b0154620023ba90919063ffffffff16565b6003805484908110620027ff57fe5b9060005260206000209060130201600b0181905550620019c0565b8060011415620019c057620028886003838154811015156200283857fe5b600091825260208083203384526012601390930201919091019052604090205460038054859081106200286757fe5b9060005260206000209060130201600d0154620023ba90919063ffffffff16565b60038054849081106200289757fe5b9060005260206000209060130201600d01819055505050565b600080831515620028c55760009150620023d1565b50828202828482811515620028d657fe5b0414620023cd57600080fd5b600080600383815481101515620028f557fe5b60009182526020808320338452601160139093020191909101905260408120546003805491935090859081106200292857fe5b600091825260208083203384526013929092029091016011019052604090205592915050565b6000806003838154811015156200296157fe5b60009182526020808320338452601260139093020191909101905260408120546003805491935090859081106200299457fe5b600091825260208083203384526013929092029091016012019052604090205592915050565b600160a060020a038216600090815260066020526040902060050154620029e8908263ffffffff620023ba16565b600160a060020a0390921660009081526006602052604090206005019190915550565b600160a060020a038116600090815260066020526040902060019081015462002a3a9163ffffffff620023ba16565b600160a060020a038216600081815260066020908152604091829020600101849055815192835282019290925281517f8456716deb9a43a5aa4d32abce50e381fd1e5d188f51e00eb727a443cfa042bc929181900390910190a150565b600160a060020a038216600090815260066020526040902060050154620029e8908263ffffffff62002ac516565b6000808383111562002ad657600080fd5b5050900390565b600160a060020a03821660009081526006602052604090206003015462002b0c90600163ffffffff620023ba16565b600160a060020a038316600090815260066020526040902060038101919091556002015462002b42908263ffffffff620023ba16565b600160a060020a03831660008181526006602090815260409182902060028101859055600301548251938452908301528181019290925290517fbc6498a0a3d78c92e20e62195917f11934518d0e3c93426d306ddf1ef7b957be9181900360600190a15050565b604051611d908062002d4083390190565b61022060405190810160405280606081526020016060815260200160608152602001600081526020016000600481111562002bf157fe5b81526020016000815260200160008152602001606081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000600160a060020a0316815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062002c9757805160ff191683800117855562002cc7565b8280016001018555821562002cc7579182015b8281111562002cc757825182559160200191906001019062002caa565b5062002cd592915062002d1f565b5090565b6101006040519081016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b62002d3c91905b8082111562002cd5576000815560010162002d26565b9056006080604052606460018190556002556005805460a860020a60ff02191690556000600c553480156200003057600080fd5b5060405160408062001d908339810160405280516020909101516000805433600160a060020a03199182168117909255600580549091169091179055600160a060020a03821615156200008257600080fd5b600160a060020a03811615156200009857600080fd5b620000cd7f72657175657374657200000000000000000000000000000000000000000000008364010000000062000181810204565b50620001037f776f726b657200000000000000000000000000000000000000000000000000008264010000000062000181810204565b50506007805443600655600a600f556005601081905563ffffffff199091164263ffffffff1617604060020a63ffffffff021916680a00000000000000001790915560118190556009805461ff0019169055805460a060020a60ff0219167401000000000000000000000000000000000000000017905550620004fe565b60055460009081907501000000000000000000000000000000000000000000900460ff1615620001b057600080fd5b60095460ff908116106200024b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f43616e206e6f7420616464206d6f7265207468616e203235352063616e64696460448201527f617465732e000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b5060095460ff166200026d8160016401000000006200183e620002cc82021704565b60ff81166000818152600a60205260409020600181018790556002018054600160a060020a031916600160a060020a0387161790556009805460ff191690911790559050620002c583640100000000620002ec810204565b5092915050565b600082820160ff8085169082161015620002e557600080fd5b9392505050565b620002f66200042c565b506040805160a081018252600160a060020a038381168252600060208084018281528486018381528651808401909752838752606086019687526080860184905260048054600181018083559190955286517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b60059096029586018054600160a060020a0319169190971617865591517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c850155517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d840155945180519495948694936200040b937f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e90910192019062000459565b50608091909101516004909101805460ff1916911515919091179055505050565b6040805160a081018252600080825260208201819052918101829052606080820152608081019190915290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200049c57805160ff1916838001178555620004cc565b82800160010185558215620004cc579182015b82811115620004cc578251825591602001919060010190620004af565b50620004da929150620004de565b5090565b620004fb91905b80821115620004da5760008155600101620004e5565b90565b611882806200050e6000396000f3006080604052600436106101745763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166303b8a89f811461017957806308731651146101a85780631385d24c146101cf57806316c16c20146101e45780631ea77adb146101f957806325b814f41461022757806331cd41991461023c57806335aa946c146102b95780633932d6b7146102ce57806342169e48146102f55780635980e67f1461030a5780636e23c5151461032857806383197ef014610349578063837833581461035e5780638bb89e49146103a35780638da5cb5b146103ca5780638db372b7146103fb5780638f54be0e1461041657806397aba7f91461042b5780639b17a9a114610489578063a567dd751461049e578063af2287e3146104bf578063bdb33d4814610500578063c7fb60e514610524578063ccebafd814610539578063d8bff5a51461054e578063e0f721271461058f578063f2fde38b146105a4578063fcd31320146105c5575b600080fd5b34801561018557600080fd5b506101a6600160a060020a036004351660243563ffffffff604435166105da565b005b3480156101b457600080fd5b506101bd6107e1565b60408051918252519081900360200190f35b3480156101db57600080fd5b506101a66107e7565b3480156101f057600080fd5b506101bd61082c565b34801561020557600080fd5b5061020e610832565b6040805163ffffffff9092168252519081900360200190f35b34801561023357600080fd5b506101bd61084a565b34801561024857600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526102a595833595369560449491939091019190819084018382808284375094975050509235600160a060020a0316935061099f92505050565b604080519115158252519081900360200190f35b3480156102c557600080fd5b506101bd6109c5565b3480156102da57600080fd5b506101a6600160a060020a03600435166024356044356109cb565b34801561030157600080fd5b506101bd610d4f565b34801561031657600080fd5b506101bd600435602435604435610d55565b34801561033457600080fd5b506102a5600160a060020a0360043516610e69565b34801561035557600080fd5b506102a5610f03565b34801561036a57600080fd5b50610388600160a060020a0360043516602435604435606435610f21565b60408051921515835260208301919091528051918290030190f35b3480156103af57600080fd5b506101a6600480359060248035908101910135604435611086565b3480156103d657600080fd5b506103df61114b565b60408051600160a060020a039092168252519081900360200190f35b34801561040757600080fd5b506102a560043560243561115a565b34801561042257600080fd5b506101bd611284565b34801561043757600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526103df95833595369560449491939091019190819084018382808284375094975061128a9650505050505050565b34801561049557600080fd5b506101bd611391565b3480156104aa57600080fd5b506101bd600160a060020a036004351661144f565b3480156104cb57600080fd5b506104e0600160a060020a0360043516611461565b604080519315158452911515602084015282820152519081900360600190f35b34801561050c57600080fd5b506103df60043560ff602435166044356064356114bf565b34801561053057600080fd5b506101bd611622565b34801561054557600080fd5b506101bd611628565b34801561055a57600080fd5b5061056f600160a060020a036004351661162e565b6040805163ffffffff909316835260208301919091528051918290030190f35b34801561059b57600080fd5b506102a5611650565b3480156105b057600080fd5b506101a6600160a060020a036004351661167e565b3480156105d157600080fd5b506101a66116c4565b6105e261178f565b600554600160a060020a031633146105f957600080fd5b6001600954610100900460ff16600381111561061157fe5b148061063257506002600954610100900460ff16600381111561063057fe5b145b151561063d57600080fd5b6005547501000000000000000000000000000000000000000000900460ff161561066657600080fd5b600160a060020a0384166000908152600b60205260409020805460ff1916600190811790915563ffffffff831610156106e9576040805160e560020a62461bcd02815260206004820152601e60248201527f4d757374207375626d6974206174206c65617374206f6e6520766f74652e0000604482015290519081900360640190fd5b600160a060020a0384166000908152600d602052604090205463ffffffff161561075d576040805160e560020a62461bcd02815260206004820152601b60248201527f43616e206f6e6c7920636f6d6d697420766f746573206f6e63652e0000000000604482015290519081900360640190fd5b5060408051808201825263ffffffff83811682526020808301868152600160a060020a0388166000908152600d9092529390208251815463ffffffff19169083161781559251600193840155600c5491926107b992916116ec16565b600c819055601154116107db576000600c556009805461ff0019166102001790555b50505050565b600f5481565b6005805475ff00000000000000000000000000000000000000000019811675010000000000000000000000000000000000000000009182900460ff1615909102179055565b60015481565b60075468010000000000000000900463ffffffff1681565b600080806001815b60045481101561089457600480548290811061086a57fe5b600091825260209091206004600590920201015460ff16151561088c57600091505b600101610852565b81156109225760009350600092505b600454831015610904576108e06004848154811015156108bf57fe5b906000526020600020906005020160010154856116ec90919063ffffffff16565b93506108f76001548561170590919063ffffffff16565b93506001909201916108a3565b60015461091890859063ffffffff6116ec16565b9350839450610998565b6002546003540143101561093557600080fd5b60009350600092505b60045483101561097e5761095a6004848154811015156108bf57fe5b93506109716001548561170590919063ffffffff16565b935060019092019161093e565b60015461099290859063ffffffff6116ec16565b93508394505b5050505090565b6000806109ac858561128a565b600160a060020a03908116931692909214949350505050565b60105481565b6109d361178f565b60055460009081908190600160a060020a031633146109f157600080fd5b6005547501000000000000000000000000000000000000000000900460ff1615610a1a57600080fd5b336000908152600b602052604090205460ff161515600114610aac576040805160e560020a62461bcd02815260206004820152602360248201527f6d73672e73656e646572206d75737420626520617070726f76656420746f207660448201527f6f74650000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a0387166000908152600d602090815260409182902082518084018452815463ffffffff168082526001909201548184015283518084018390528085018b905260608082018b90528551808303909101815260809091019485905280519198509196509092918291908401908083835b60208310610b415780518252601f199092019160209182019101610b22565b51815160209384036101000a6000190180199092169116179052604051919093018190039020918801519195505084149150610bef9050576040805160e560020a62461bcd02815260206004820152602760248201527f4861736820646f6573206e6f74206d617463682074686520636f6d6d6974746560448201527f6420686173682e00000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a0387166000908152600d60205260408120805463ffffffff1916815560010181905586118015610c2b575060095460ff168611155b1515610ca7576040805160e560020a62461bcd02815260206004820152602a60248201527f566f7465206d75737420626520706c6163656420666f7220612076616c69642060448201527f63616e6469646174652e00000000000000000000000000000000000000000000606482015290519081900360840190fd5b506000858152600a602052604090205463ffffffff90811690610cd0908290858116906116ec16565b6000878152600a60209081526040808320805463ffffffff191663ffffffff86811691909117909155600160a060020a038c168452600e909252909120889055600c54919250610d2491906001906116ec16565b600c81905560115411610d46576000600c556009805461ff0019166103001790555b50505050505050565b600c5481565b60095460009060ff16831115610ddb576040805160e560020a62461bcd02815260206004820152602a60248201527f566f7465206d75737420626520706c6163656420666f7220612076616c69642060448201527f63616e6469646174652e00000000000000000000000000000000000000000000606482015290519081900360840190fd5b604080516020808201879052818301869052606080830186905283518084039091018152608090920192839052815191929182918401908083835b60208310610e355780518252601f199092019160209182019101610e16565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120979650505050505050565b60408051608081018252604181527f39621d9bcfd838bf3f4666af7b33c355d61d9102f394aca137acdf7bd0c20e5260208201527f1af2df88a03f30121993e7c591c7948e3da559e64b1d2d8355094479e3a72a5391810191909152600060608201819052907f4e03657aea45a94fc7d47ba826c8d667c0d1e6e33a64a036ec44f58fa12d6c45610efb81838661099f565b949350505050565b60008054600160a060020a03163314610f1b57600080fd5b33ff5b90565b6005546000908190819081908190819081908190600160a060020a03163314610f4957600080fd5b60075463ffffffff168b1115610f655760009750879650611077565b610f6d61084a565b95508b866040516020018083600160a060020a0316600160a060020a03166c01000000000000000000000000028152601401828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310610fe75780518252601f199092019160209182019101610fc8565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912097508892508791505081151561102257fe5b0693506006544303925060646010548481151561103b57fe5b04600f548c0101870281151561104d57fe5b0491508184101561106f5761106189611726565b905060018197509750611077565b600097508796505b50505050505094509492505050565b6110eb8484848080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050506004848154811015156110cc57fe5b6000918252602090912060059091020154600160a060020a031661099f565b156107db578360048281548110151561110057fe5b600091825260209091206002600590920201015560048054849184918490811061112657fe5b906000526020600020906005020160030191906111449291906117a6565b5050505050565b600554600160a060020a031681565b60008083604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083106111ac5780518252601f19909201916020918201910161118d565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902090506004838154811015156111ea57fe5b60009182526020909120600260059092020101548114156112785760015461121990859063ffffffff61170516565b600480548590811061122757fe5b906000526020600020906005020160010181905550600160048481548110151561124d57fe5b60009182526020909120600590910201600401805460ff19169115159190911790556001915061127d565b600091505b5092915050565b60025481565b600080600080845160411415156112eb576040805160e560020a62461bcd02815260206004820152601660248201527f5265717569726520636f7272656374206c656e67746800000000000000000000604482015290519081900360640190fd5b50505060208201516040830151606084015160001a601b60ff8216101561131057601b015b8060ff16601b148061132557508060ff16601c145b151561137b576040805160e560020a62461bcd02815260206004820152601b60248201527f5369676e61747572652076657273696f6e206e6f74206d617463680000000000604482015290519081900360640190fd5b611387868285856114bf565b9695505050505050565b600080806003600954610100900460ff1660038111156113ad57fe5b14611402576040805160e560020a62461bcd02815260206004820181905260248201527f766f7465206d75737420626520696e20436f6d706c657465642050686173652e604482015290519081900360640190fd5b506000905060015b60095460ff16811015611449576000828152600a60205260408082205483835291205463ffffffff91821691161115611441578091505b60010161140a565b50919050565b600e6020526000908152604090205481565b600160a060020a0381166000908152600b602052604081205460ff169080611487611391565b600160a060020a0385166000908152600e60205260409020549091508114156114b357600191506114b8565b600091505b9193909250565b604080518082018252601c8082527f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080840191825293516000948593849386938c9301918291908083835b6020831061152b5780518252601f19909201916020918201910161150c565b51815160209384036101000a600019018019909216911617905292019384525060408051808503815293820190819052835193945092839250908401908083835b6020831061158b5780518252601f19909201916020918201910161156c565b51815160209384036101000a600019018019909216911617905260408051929094018290038220600080845283830180875282905260ff8f1684870152606084018e9052608084018d905294519098506001965060a080840196509194601f19820194509281900390910191865af115801561160b573d6000803e3d6000fd5b5050604051601f1901519998505050505050505050565b60115481565b60035481565b600d602052600090815260409020805460019091015463ffffffff9091169082565b60006003600954610100900460ff16600381111561166a57fe5b141561167857506001610f1e565b50600090565b600554600160a060020a0316331461169557600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600554600160a060020a031633146116db57600080fd5b6009805461ff001916610100179055565b6000828201838110156116fe57600080fd5b9392505050565b600081151561171357600080fd5b818381151561171e57fe5b069392505050565b60075460009081906116fe9063ffffffff68010000000000000000909104811690611755908690819061176116565b9063ffffffff61176116565b600080831515611774576000915061127d565b5082820282848281151561178457fe5b04146116fe57600080fd5b604080518082019091526000808252602082015290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106117e75782800160ff19823516178555611814565b82800160010185558215611814579182015b828111156118145782358255916020019190600101906117f9565b50611820929150611824565b5090565b610f1e91905b80821115611820576000815560010161182a565b600082820160ff80851690821610156116fe57600080fd00a165627a7a72305820633044effba8e5014091ec7965771142d55f0d4a1afa3b61b24a4cbbff5526ad0029a165627a7a7230582034715bbbfcdb7392c40808c27ffe391292be5dbd81db63df0631dc32d4f181670029"

// DeployTaskCore deploys a new Ethereum contract, binding an instance of TaskCore to it.
func DeployTaskCore(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TaskCore, error) {
	parsed, err := abi.JSON(strings.NewReader(TaskCoreABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(TaskCoreBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TaskCore{TaskCoreCaller: TaskCoreCaller{contract: contract}, TaskCoreTransactor: TaskCoreTransactor{contract: contract}, TaskCoreFilterer: TaskCoreFilterer{contract: contract}}, nil
}

// TaskCore is an auto generated Go binding around an Ethereum contract.
type TaskCore struct {
	TaskCoreCaller     // Read-only binding to the contract
	TaskCoreTransactor // Write-only binding to the contract
	TaskCoreFilterer   // Log filterer for contract events
}

// TaskCoreCaller is an auto generated read-only Go binding around an Ethereum contract.
type TaskCoreCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TaskCoreTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TaskCoreTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TaskCoreFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TaskCoreFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TaskCoreSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TaskCoreSession struct {
	Contract     *TaskCore         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TaskCoreCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TaskCoreCallerSession struct {
	Contract *TaskCoreCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// TaskCoreTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TaskCoreTransactorSession struct {
	Contract     *TaskCoreTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// TaskCoreRaw is an auto generated low-level Go binding around an Ethereum contract.
type TaskCoreRaw struct {
	Contract *TaskCore // Generic contract binding to access the raw methods on
}

// TaskCoreCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TaskCoreCallerRaw struct {
	Contract *TaskCoreCaller // Generic read-only contract binding to access the raw methods on
}

// TaskCoreTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TaskCoreTransactorRaw struct {
	Contract *TaskCoreTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTaskCore creates a new instance of TaskCore, bound to a specific deployed contract.
func NewTaskCore(address common.Address, backend bind.ContractBackend) (*TaskCore, error) {
	contract, err := bindTaskCore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TaskCore{TaskCoreCaller: TaskCoreCaller{contract: contract}, TaskCoreTransactor: TaskCoreTransactor{contract: contract}, TaskCoreFilterer: TaskCoreFilterer{contract: contract}}, nil
}

// NewTaskCoreCaller creates a new read-only instance of TaskCore, bound to a specific deployed contract.
func NewTaskCoreCaller(address common.Address, caller bind.ContractCaller) (*TaskCoreCaller, error) {
	contract, err := bindTaskCore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TaskCoreCaller{contract: contract}, nil
}

// NewTaskCoreTransactor creates a new write-only instance of TaskCore, bound to a specific deployed contract.
func NewTaskCoreTransactor(address common.Address, transactor bind.ContractTransactor) (*TaskCoreTransactor, error) {
	contract, err := bindTaskCore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TaskCoreTransactor{contract: contract}, nil
}

// NewTaskCoreFilterer creates a new log filterer instance of TaskCore, bound to a specific deployed contract.
func NewTaskCoreFilterer(address common.Address, filterer bind.ContractFilterer) (*TaskCoreFilterer, error) {
	contract, err := bindTaskCore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TaskCoreFilterer{contract: contract}, nil
}

// bindTaskCore binds a generic wrapper to an already deployed contract.
func bindTaskCore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TaskCoreABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TaskCore *TaskCoreRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _TaskCore.Contract.TaskCoreCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TaskCore *TaskCoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TaskCore.Contract.TaskCoreTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TaskCore *TaskCoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TaskCore.Contract.TaskCoreTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TaskCore *TaskCoreCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _TaskCore.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TaskCore *TaskCoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TaskCore.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TaskCore *TaskCoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TaskCore.Contract.contract.Transact(opts, method, params...)
}

// GetTaskInfo1 is a free data retrieval call binding the contract method 0x90d0cab4.
//
// Solidity: function GetTaskInfo_1(uint256 _taskId) constant returns(string taskName, string content, string detailContentHash, uint256 workerLevel, uint8 status, uint256 totalWeiPaid, uint256 taskRewardWei, string resultHash, uint256 createTime, uint256 createBlock)
func (_TaskCore *TaskCoreCaller) GetTaskInfo1(opts *bind.CallOpts, _taskId *big.Int) (struct {
	TaskName          string
	Content           string
	DetailContentHash string
	WorkerLevel       *big.Int
	Status            uint8
	TotalWeiPaid      *big.Int
	TaskRewardWei     *big.Int
	ResultHash        string
	CreateTime        *big.Int
	CreateBlock       *big.Int
}, error) {
	ret := new(struct {
		TaskName          string
		Content           string
		DetailContentHash string
		WorkerLevel       *big.Int
		Status            uint8
		TotalWeiPaid      *big.Int
		TaskRewardWei     *big.Int
		ResultHash        string
		CreateTime        *big.Int
		CreateBlock       *big.Int
	})
	out := ret
	err := _TaskCore.contract.Call(opts, out, "GetTaskInfo_1", _taskId)
	return *ret, err
}

// GetTaskInfo1 is a free data retrieval call binding the contract method 0x90d0cab4.
//
// Solidity: function GetTaskInfo_1(uint256 _taskId) constant returns(string taskName, string content, string detailContentHash, uint256 workerLevel, uint8 status, uint256 totalWeiPaid, uint256 taskRewardWei, string resultHash, uint256 createTime, uint256 createBlock)
func (_TaskCore *TaskCoreSession) GetTaskInfo1(_taskId *big.Int) (struct {
	TaskName          string
	Content           string
	DetailContentHash string
	WorkerLevel       *big.Int
	Status            uint8
	TotalWeiPaid      *big.Int
	TaskRewardWei     *big.Int
	ResultHash        string
	CreateTime        *big.Int
	CreateBlock       *big.Int
}, error) {
	return _TaskCore.Contract.GetTaskInfo1(&_TaskCore.CallOpts, _taskId)
}

// GetTaskInfo1 is a free data retrieval call binding the contract method 0x90d0cab4.
//
// Solidity: function GetTaskInfo_1(uint256 _taskId) constant returns(string taskName, string content, string detailContentHash, uint256 workerLevel, uint8 status, uint256 totalWeiPaid, uint256 taskRewardWei, string resultHash, uint256 createTime, uint256 createBlock)
func (_TaskCore *TaskCoreCallerSession) GetTaskInfo1(_taskId *big.Int) (struct {
	TaskName          string
	Content           string
	DetailContentHash string
	WorkerLevel       *big.Int
	Status            uint8
	TotalWeiPaid      *big.Int
	TaskRewardWei     *big.Int
	ResultHash        string
	CreateTime        *big.Int
	CreateBlock       *big.Int
}, error) {
	return _TaskCore.Contract.GetTaskInfo1(&_TaskCore.CallOpts, _taskId)
}

// CeoAddress is a free data retrieval call binding the contract method 0x0a0f8168.
//
// Solidity: function ceoAddress() constant returns(address)
func (_TaskCore *TaskCoreCaller) CeoAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TaskCore.contract.Call(opts, out, "ceoAddress")
	return *ret0, err
}

// CeoAddress is a free data retrieval call binding the contract method 0x0a0f8168.
//
// Solidity: function ceoAddress() constant returns(address)
func (_TaskCore *TaskCoreSession) CeoAddress() (common.Address, error) {
	return _TaskCore.Contract.CeoAddress(&_TaskCore.CallOpts)
}

// CeoAddress is a free data retrieval call binding the contract method 0x0a0f8168.
//
// Solidity: function ceoAddress() constant returns(address)
func (_TaskCore *TaskCoreCallerSession) CeoAddress() (common.Address, error) {
	return _TaskCore.Contract.CeoAddress(&_TaskCore.CallOpts)
}

// GetTaskReward is a free data retrieval call binding the contract method 0x75058f33.
//
// Solidity: function getTaskReward(uint256 _taskId, uint256 _winChoice) constant returns(address, uint256)
func (_TaskCore *TaskCoreCaller) GetTaskReward(opts *bind.CallOpts, _taskId *big.Int, _winChoice *big.Int) (common.Address, *big.Int, error) {
	var (
		ret0 = new(common.Address)
		ret1 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _TaskCore.contract.Call(opts, out, "getTaskReward", _taskId, _winChoice)
	return *ret0, *ret1, err
}

// GetTaskReward is a free data retrieval call binding the contract method 0x75058f33.
//
// Solidity: function getTaskReward(uint256 _taskId, uint256 _winChoice) constant returns(address, uint256)
func (_TaskCore *TaskCoreSession) GetTaskReward(_taskId *big.Int, _winChoice *big.Int) (common.Address, *big.Int, error) {
	return _TaskCore.Contract.GetTaskReward(&_TaskCore.CallOpts, _taskId, _winChoice)
}

// GetTaskReward is a free data retrieval call binding the contract method 0x75058f33.
//
// Solidity: function getTaskReward(uint256 _taskId, uint256 _winChoice) constant returns(address, uint256)
func (_TaskCore *TaskCoreCallerSession) GetTaskReward(_taskId *big.Int, _winChoice *big.Int) (common.Address, *big.Int, error) {
	return _TaskCore.Contract.GetTaskReward(&_TaskCore.CallOpts, _taskId, _winChoice)
}

// GetTaskVoteAddress is a free data retrieval call binding the contract method 0xec0153db.
//
// Solidity: function getTaskVoteAddress(uint256 _taskId) constant returns(address)
func (_TaskCore *TaskCoreCaller) GetTaskVoteAddress(opts *bind.CallOpts, _taskId *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TaskCore.contract.Call(opts, out, "getTaskVoteAddress", _taskId)
	return *ret0, err
}

// GetTaskVoteAddress is a free data retrieval call binding the contract method 0xec0153db.
//
// Solidity: function getTaskVoteAddress(uint256 _taskId) constant returns(address)
func (_TaskCore *TaskCoreSession) GetTaskVoteAddress(_taskId *big.Int) (common.Address, error) {
	return _TaskCore.Contract.GetTaskVoteAddress(&_TaskCore.CallOpts, _taskId)
}

// GetTaskVoteAddress is a free data retrieval call binding the contract method 0xec0153db.
//
// Solidity: function getTaskVoteAddress(uint256 _taskId) constant returns(address)
func (_TaskCore *TaskCoreCallerSession) GetTaskVoteAddress(_taskId *big.Int) (common.Address, error) {
	return _TaskCore.Contract.GetTaskVoteAddress(&_TaskCore.CallOpts, _taskId)
}

// GetWorkerLevel is a free data retrieval call binding the contract method 0xefcff56c.
//
// Solidity: function getWorkerLevel(address _worker) constant returns(uint256)
func (_TaskCore *TaskCoreCaller) GetWorkerLevel(opts *bind.CallOpts, _worker common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _TaskCore.contract.Call(opts, out, "getWorkerLevel", _worker)
	return *ret0, err
}

// GetWorkerLevel is a free data retrieval call binding the contract method 0xefcff56c.
//
// Solidity: function getWorkerLevel(address _worker) constant returns(uint256)
func (_TaskCore *TaskCoreSession) GetWorkerLevel(_worker common.Address) (*big.Int, error) {
	return _TaskCore.Contract.GetWorkerLevel(&_TaskCore.CallOpts, _worker)
}

// GetWorkerLevel is a free data retrieval call binding the contract method 0xefcff56c.
//
// Solidity: function getWorkerLevel(address _worker) constant returns(uint256)
func (_TaskCore *TaskCoreCallerSession) GetWorkerLevel(_worker common.Address) (*big.Int, error) {
	return _TaskCore.Contract.GetWorkerLevel(&_TaskCore.CallOpts, _worker)
}

// IntervalBlock is a free data retrieval call binding the contract method 0x8f54be0e.
//
// Solidity: function intervalBlock() constant returns(uint256)
func (_TaskCore *TaskCoreCaller) IntervalBlock(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _TaskCore.contract.Call(opts, out, "intervalBlock")
	return *ret0, err
}

// IntervalBlock is a free data retrieval call binding the contract method 0x8f54be0e.
//
// Solidity: function intervalBlock() constant returns(uint256)
func (_TaskCore *TaskCoreSession) IntervalBlock() (*big.Int, error) {
	return _TaskCore.Contract.IntervalBlock(&_TaskCore.CallOpts)
}

// IntervalBlock is a free data retrieval call binding the contract method 0x8f54be0e.
//
// Solidity: function intervalBlock() constant returns(uint256)
func (_TaskCore *TaskCoreCallerSession) IntervalBlock() (*big.Int, error) {
	return _TaskCore.Contract.IntervalBlock(&_TaskCore.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_TaskCore *TaskCoreCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _TaskCore.contract.Call(opts, out, "paused")
	return *ret0, err
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_TaskCore *TaskCoreSession) Paused() (bool, error) {
	return _TaskCore.Contract.Paused(&_TaskCore.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_TaskCore *TaskCoreCallerSession) Paused() (bool, error) {
	return _TaskCore.Contract.Paused(&_TaskCore.CallOpts)
}

// SecondsPerBlock is a free data retrieval call binding the contract method 0x7a7d4937.
//
// Solidity: function secondsPerBlock() constant returns(uint256)
func (_TaskCore *TaskCoreCaller) SecondsPerBlock(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _TaskCore.contract.Call(opts, out, "secondsPerBlock")
	return *ret0, err
}

// SecondsPerBlock is a free data retrieval call binding the contract method 0x7a7d4937.
//
// Solidity: function secondsPerBlock() constant returns(uint256)
func (_TaskCore *TaskCoreSession) SecondsPerBlock() (*big.Int, error) {
	return _TaskCore.Contract.SecondsPerBlock(&_TaskCore.CallOpts)
}

// SecondsPerBlock is a free data retrieval call binding the contract method 0x7a7d4937.
//
// Solidity: function secondsPerBlock() constant returns(uint256)
func (_TaskCore *TaskCoreCallerSession) SecondsPerBlock() (*big.Int, error) {
	return _TaskCore.Contract.SecondsPerBlock(&_TaskCore.CallOpts)
}

// TaskIdToWorker is a free data retrieval call binding the contract method 0xa5eab62d.
//
// Solidity: function taskIdToWorker(uint256 ) constant returns(address)
func (_TaskCore *TaskCoreCaller) TaskIdToWorker(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TaskCore.contract.Call(opts, out, "taskIdToWorker", arg0)
	return *ret0, err
}

// TaskIdToWorker is a free data retrieval call binding the contract method 0xa5eab62d.
//
// Solidity: function taskIdToWorker(uint256 ) constant returns(address)
func (_TaskCore *TaskCoreSession) TaskIdToWorker(arg0 *big.Int) (common.Address, error) {
	return _TaskCore.Contract.TaskIdToWorker(&_TaskCore.CallOpts, arg0)
}

// TaskIdToWorker is a free data retrieval call binding the contract method 0xa5eab62d.
//
// Solidity: function taskIdToWorker(uint256 ) constant returns(address)
func (_TaskCore *TaskCoreCallerSession) TaskIdToWorker(arg0 *big.Int) (common.Address, error) {
	return _TaskCore.Contract.TaskIdToWorker(&_TaskCore.CallOpts, arg0)
}

// TaskIndexToRequester is a free data retrieval call binding the contract method 0x8044c8c8.
//
// Solidity: function taskIndexToRequester(uint256 ) constant returns(address)
func (_TaskCore *TaskCoreCaller) TaskIndexToRequester(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TaskCore.contract.Call(opts, out, "taskIndexToRequester", arg0)
	return *ret0, err
}

// TaskIndexToRequester is a free data retrieval call binding the contract method 0x8044c8c8.
//
// Solidity: function taskIndexToRequester(uint256 ) constant returns(address)
func (_TaskCore *TaskCoreSession) TaskIndexToRequester(arg0 *big.Int) (common.Address, error) {
	return _TaskCore.Contract.TaskIndexToRequester(&_TaskCore.CallOpts, arg0)
}

// TaskIndexToRequester is a free data retrieval call binding the contract method 0x8044c8c8.
//
// Solidity: function taskIndexToRequester(uint256 ) constant returns(address)
func (_TaskCore *TaskCoreCallerSession) TaskIndexToRequester(arg0 *big.Int) (common.Address, error) {
	return _TaskCore.Contract.TaskIndexToRequester(&_TaskCore.CallOpts, arg0)
}

// Users is a free data retrieval call binding the contract method 0xa87430ba.
//
// Solidity: function users(address ) constant returns(uint256 registerTime, uint256 acceptedWork, uint256 workScore, uint256 finishedWork, uint256 voteWin, uint256 voteRewardFee, uint256 candidateAsWorker, uint256 candidateAsRequester)
func (_TaskCore *TaskCoreCaller) Users(opts *bind.CallOpts, arg0 common.Address) (struct {
	RegisterTime         *big.Int
	AcceptedWork         *big.Int
	WorkScore            *big.Int
	FinishedWork         *big.Int
	VoteWin              *big.Int
	VoteRewardFee        *big.Int
	CandidateAsWorker    *big.Int
	CandidateAsRequester *big.Int
}, error) {
	ret := new(struct {
		RegisterTime         *big.Int
		AcceptedWork         *big.Int
		WorkScore            *big.Int
		FinishedWork         *big.Int
		VoteWin              *big.Int
		VoteRewardFee        *big.Int
		CandidateAsWorker    *big.Int
		CandidateAsRequester *big.Int
	})
	out := ret
	err := _TaskCore.contract.Call(opts, out, "users", arg0)
	return *ret, err
}

// Users is a free data retrieval call binding the contract method 0xa87430ba.
//
// Solidity: function users(address ) constant returns(uint256 registerTime, uint256 acceptedWork, uint256 workScore, uint256 finishedWork, uint256 voteWin, uint256 voteRewardFee, uint256 candidateAsWorker, uint256 candidateAsRequester)
func (_TaskCore *TaskCoreSession) Users(arg0 common.Address) (struct {
	RegisterTime         *big.Int
	AcceptedWork         *big.Int
	WorkScore            *big.Int
	FinishedWork         *big.Int
	VoteWin              *big.Int
	VoteRewardFee        *big.Int
	CandidateAsWorker    *big.Int
	CandidateAsRequester *big.Int
}, error) {
	return _TaskCore.Contract.Users(&_TaskCore.CallOpts, arg0)
}

// Users is a free data retrieval call binding the contract method 0xa87430ba.
//
// Solidity: function users(address ) constant returns(uint256 registerTime, uint256 acceptedWork, uint256 workScore, uint256 finishedWork, uint256 voteWin, uint256 voteRewardFee, uint256 candidateAsWorker, uint256 candidateAsRequester)
func (_TaskCore *TaskCoreCallerSession) Users(arg0 common.Address) (struct {
	RegisterTime         *big.Int
	AcceptedWork         *big.Int
	WorkScore            *big.Int
	FinishedWork         *big.Int
	VoteWin              *big.Int
	VoteRewardFee        *big.Int
	CandidateAsWorker    *big.Int
	CandidateAsRequester *big.Int
}, error) {
	return _TaskCore.Contract.Users(&_TaskCore.CallOpts, arg0)
}

// AcceptTask is a paid mutator transaction binding the contract method 0x1bf6912d.
//
// Solidity: function acceptTask(uint256 _taskId) returns(bool)
func (_TaskCore *TaskCoreTransactor) AcceptTask(opts *bind.TransactOpts, _taskId *big.Int) (*types.Transaction, error) {
	return _TaskCore.contract.Transact(opts, "acceptTask", _taskId)
}

// AcceptTask is a paid mutator transaction binding the contract method 0x1bf6912d.
//
// Solidity: function acceptTask(uint256 _taskId) returns(bool)
func (_TaskCore *TaskCoreSession) AcceptTask(_taskId *big.Int) (*types.Transaction, error) {
	return _TaskCore.Contract.AcceptTask(&_TaskCore.TransactOpts, _taskId)
}

// AcceptTask is a paid mutator transaction binding the contract method 0x1bf6912d.
//
// Solidity: function acceptTask(uint256 _taskId) returns(bool)
func (_TaskCore *TaskCoreTransactorSession) AcceptTask(_taskId *big.Int) (*types.Transaction, error) {
	return _TaskCore.Contract.AcceptTask(&_TaskCore.TransactOpts, _taskId)
}

// AddMoneyForReward is a paid mutator transaction binding the contract method 0x9e2b8411.
//
// Solidity: function addMoneyForReward(uint256 _taskId) returns()
func (_TaskCore *TaskCoreTransactor) AddMoneyForReward(opts *bind.TransactOpts, _taskId *big.Int) (*types.Transaction, error) {
	return _TaskCore.contract.Transact(opts, "addMoneyForReward", _taskId)
}

// AddMoneyForReward is a paid mutator transaction binding the contract method 0x9e2b8411.
//
// Solidity: function addMoneyForReward(uint256 _taskId) returns()
func (_TaskCore *TaskCoreSession) AddMoneyForReward(_taskId *big.Int) (*types.Transaction, error) {
	return _TaskCore.Contract.AddMoneyForReward(&_TaskCore.TransactOpts, _taskId)
}

// AddMoneyForReward is a paid mutator transaction binding the contract method 0x9e2b8411.
//
// Solidity: function addMoneyForReward(uint256 _taskId) returns()
func (_TaskCore *TaskCoreTransactorSession) AddMoneyForReward(_taskId *big.Int) (*types.Transaction, error) {
	return _TaskCore.Contract.AddMoneyForReward(&_TaskCore.TransactOpts, _taskId)
}

// CreateTask is a paid mutator transaction binding the contract method 0x103099f3.
//
// Solidity: function createTask(string _taskName, string _content, string _detailContentHash, uint256 _workerLevel) returns(uint256)
func (_TaskCore *TaskCoreTransactor) CreateTask(opts *bind.TransactOpts, _taskName string, _content string, _detailContentHash string, _workerLevel *big.Int) (*types.Transaction, error) {
	return _TaskCore.contract.Transact(opts, "createTask", _taskName, _content, _detailContentHash, _workerLevel)
}

// CreateTask is a paid mutator transaction binding the contract method 0x103099f3.
//
// Solidity: function createTask(string _taskName, string _content, string _detailContentHash, uint256 _workerLevel) returns(uint256)
func (_TaskCore *TaskCoreSession) CreateTask(_taskName string, _content string, _detailContentHash string, _workerLevel *big.Int) (*types.Transaction, error) {
	return _TaskCore.Contract.CreateTask(&_TaskCore.TransactOpts, _taskName, _content, _detailContentHash, _workerLevel)
}

// CreateTask is a paid mutator transaction binding the contract method 0x103099f3.
//
// Solidity: function createTask(string _taskName, string _content, string _detailContentHash, uint256 _workerLevel) returns(uint256)
func (_TaskCore *TaskCoreTransactorSession) CreateTask(_taskName string, _content string, _detailContentHash string, _workerLevel *big.Int) (*types.Transaction, error) {
	return _TaskCore.Contract.CreateTask(&_TaskCore.TransactOpts, _taskName, _content, _detailContentHash, _workerLevel)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_TaskCore *TaskCoreTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TaskCore.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_TaskCore *TaskCoreSession) Pause() (*types.Transaction, error) {
	return _TaskCore.Contract.Pause(&_TaskCore.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_TaskCore *TaskCoreTransactorSession) Pause() (*types.Transaction, error) {
	return _TaskCore.Contract.Pause(&_TaskCore.TransactOpts)
}

// ProposeToVote is a paid mutator transaction binding the contract method 0x92b5ff72.
//
// Solidity: function proposeToVote(uint256 _taskId, string _requesterProof) returns()
func (_TaskCore *TaskCoreTransactor) ProposeToVote(opts *bind.TransactOpts, _taskId *big.Int, _requesterProof string) (*types.Transaction, error) {
	return _TaskCore.contract.Transact(opts, "proposeToVote", _taskId, _requesterProof)
}

// ProposeToVote is a paid mutator transaction binding the contract method 0x92b5ff72.
//
// Solidity: function proposeToVote(uint256 _taskId, string _requesterProof) returns()
func (_TaskCore *TaskCoreSession) ProposeToVote(_taskId *big.Int, _requesterProof string) (*types.Transaction, error) {
	return _TaskCore.Contract.ProposeToVote(&_TaskCore.TransactOpts, _taskId, _requesterProof)
}

// ProposeToVote is a paid mutator transaction binding the contract method 0x92b5ff72.
//
// Solidity: function proposeToVote(uint256 _taskId, string _requesterProof) returns()
func (_TaskCore *TaskCoreTransactorSession) ProposeToVote(_taskId *big.Int, _requesterProof string) (*types.Transaction, error) {
	return _TaskCore.Contract.ProposeToVote(&_TaskCore.TransactOpts, _taskId, _requesterProof)
}

// RegisterUser is a paid mutator transaction binding the contract method 0x4d3820eb.
//
// Solidity: function registerUser() returns()
func (_TaskCore *TaskCoreTransactor) RegisterUser(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TaskCore.contract.Transact(opts, "registerUser")
}

// RegisterUser is a paid mutator transaction binding the contract method 0x4d3820eb.
//
// Solidity: function registerUser() returns()
func (_TaskCore *TaskCoreSession) RegisterUser() (*types.Transaction, error) {
	return _TaskCore.Contract.RegisterUser(&_TaskCore.TransactOpts)
}

// RegisterUser is a paid mutator transaction binding the contract method 0x4d3820eb.
//
// Solidity: function registerUser() returns()
func (_TaskCore *TaskCoreTransactorSession) RegisterUser() (*types.Transaction, error) {
	return _TaskCore.Contract.RegisterUser(&_TaskCore.TransactOpts)
}

// RevealVoteForTask is a paid mutator transaction binding the contract method 0xf05da2fa.
//
// Solidity: function revealVoteForTask(uint256 _taskId, uint256 _vote, bytes32 _salt) returns()
func (_TaskCore *TaskCoreTransactor) RevealVoteForTask(opts *bind.TransactOpts, _taskId *big.Int, _vote *big.Int, _salt [32]byte) (*types.Transaction, error) {
	return _TaskCore.contract.Transact(opts, "revealVoteForTask", _taskId, _vote, _salt)
}

// RevealVoteForTask is a paid mutator transaction binding the contract method 0xf05da2fa.
//
// Solidity: function revealVoteForTask(uint256 _taskId, uint256 _vote, bytes32 _salt) returns()
func (_TaskCore *TaskCoreSession) RevealVoteForTask(_taskId *big.Int, _vote *big.Int, _salt [32]byte) (*types.Transaction, error) {
	return _TaskCore.Contract.RevealVoteForTask(&_TaskCore.TransactOpts, _taskId, _vote, _salt)
}

// RevealVoteForTask is a paid mutator transaction binding the contract method 0xf05da2fa.
//
// Solidity: function revealVoteForTask(uint256 _taskId, uint256 _vote, bytes32 _salt) returns()
func (_TaskCore *TaskCoreTransactorSession) RevealVoteForTask(_taskId *big.Int, _vote *big.Int, _salt [32]byte) (*types.Transaction, error) {
	return _TaskCore.Contract.RevealVoteForTask(&_TaskCore.TransactOpts, _taskId, _vote, _salt)
}

// SetCEO is a paid mutator transaction binding the contract method 0x27d7874c.
//
// Solidity: function setCEO(address _newCEO) returns()
func (_TaskCore *TaskCoreTransactor) SetCEO(opts *bind.TransactOpts, _newCEO common.Address) (*types.Transaction, error) {
	return _TaskCore.contract.Transact(opts, "setCEO", _newCEO)
}

// SetCEO is a paid mutator transaction binding the contract method 0x27d7874c.
//
// Solidity: function setCEO(address _newCEO) returns()
func (_TaskCore *TaskCoreSession) SetCEO(_newCEO common.Address) (*types.Transaction, error) {
	return _TaskCore.Contract.SetCEO(&_TaskCore.TransactOpts, _newCEO)
}

// SetCEO is a paid mutator transaction binding the contract method 0x27d7874c.
//
// Solidity: function setCEO(address _newCEO) returns()
func (_TaskCore *TaskCoreTransactorSession) SetCEO(_newCEO common.Address) (*types.Transaction, error) {
	return _TaskCore.Contract.SetCEO(&_TaskCore.TransactOpts, _newCEO)
}

// SetSecondsPerBlock is a paid mutator transaction binding the contract method 0x5663896e.
//
// Solidity: function setSecondsPerBlock(uint256 secs) returns()
func (_TaskCore *TaskCoreTransactor) SetSecondsPerBlock(opts *bind.TransactOpts, secs *big.Int) (*types.Transaction, error) {
	return _TaskCore.contract.Transact(opts, "setSecondsPerBlock", secs)
}

// SetSecondsPerBlock is a paid mutator transaction binding the contract method 0x5663896e.
//
// Solidity: function setSecondsPerBlock(uint256 secs) returns()
func (_TaskCore *TaskCoreSession) SetSecondsPerBlock(secs *big.Int) (*types.Transaction, error) {
	return _TaskCore.Contract.SetSecondsPerBlock(&_TaskCore.TransactOpts, secs)
}

// SetSecondsPerBlock is a paid mutator transaction binding the contract method 0x5663896e.
//
// Solidity: function setSecondsPerBlock(uint256 secs) returns()
func (_TaskCore *TaskCoreTransactorSession) SetSecondsPerBlock(secs *big.Int) (*types.Transaction, error) {
	return _TaskCore.Contract.SetSecondsPerBlock(&_TaskCore.TransactOpts, secs)
}

// SettlementTask is a paid mutator transaction binding the contract method 0xe48be048.
//
// Solidity: function settlementTask(uint256 _taskId, uint256 _score) returns()
func (_TaskCore *TaskCoreTransactor) SettlementTask(opts *bind.TransactOpts, _taskId *big.Int, _score *big.Int) (*types.Transaction, error) {
	return _TaskCore.contract.Transact(opts, "settlementTask", _taskId, _score)
}

// SettlementTask is a paid mutator transaction binding the contract method 0xe48be048.
//
// Solidity: function settlementTask(uint256 _taskId, uint256 _score) returns()
func (_TaskCore *TaskCoreSession) SettlementTask(_taskId *big.Int, _score *big.Int) (*types.Transaction, error) {
	return _TaskCore.Contract.SettlementTask(&_TaskCore.TransactOpts, _taskId, _score)
}

// SettlementTask is a paid mutator transaction binding the contract method 0xe48be048.
//
// Solidity: function settlementTask(uint256 _taskId, uint256 _score) returns()
func (_TaskCore *TaskCoreTransactorSession) SettlementTask(_taskId *big.Int, _score *big.Int) (*types.Transaction, error) {
	return _TaskCore.Contract.SettlementTask(&_TaskCore.TransactOpts, _taskId, _score)
}

// SubmitTaskResult is a paid mutator transaction binding the contract method 0xec824f6a.
//
// Solidity: function submitTaskResult(uint256 _taskId, string _resHash) returns()
func (_TaskCore *TaskCoreTransactor) SubmitTaskResult(opts *bind.TransactOpts, _taskId *big.Int, _resHash string) (*types.Transaction, error) {
	return _TaskCore.contract.Transact(opts, "submitTaskResult", _taskId, _resHash)
}

// SubmitTaskResult is a paid mutator transaction binding the contract method 0xec824f6a.
//
// Solidity: function submitTaskResult(uint256 _taskId, string _resHash) returns()
func (_TaskCore *TaskCoreSession) SubmitTaskResult(_taskId *big.Int, _resHash string) (*types.Transaction, error) {
	return _TaskCore.Contract.SubmitTaskResult(&_TaskCore.TransactOpts, _taskId, _resHash)
}

// SubmitTaskResult is a paid mutator transaction binding the contract method 0xec824f6a.
//
// Solidity: function submitTaskResult(uint256 _taskId, string _resHash) returns()
func (_TaskCore *TaskCoreTransactorSession) SubmitTaskResult(_taskId *big.Int, _resHash string) (*types.Transaction, error) {
	return _TaskCore.Contract.SubmitTaskResult(&_TaskCore.TransactOpts, _taskId, _resHash)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_TaskCore *TaskCoreTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TaskCore.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_TaskCore *TaskCoreSession) Unpause() (*types.Transaction, error) {
	return _TaskCore.Contract.Unpause(&_TaskCore.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_TaskCore *TaskCoreTransactorSession) Unpause() (*types.Transaction, error) {
	return _TaskCore.Contract.Unpause(&_TaskCore.TransactOpts)
}

// VoteForTask is a paid mutator transaction binding the contract method 0x4a9ec1ba.
//
// Solidity: function voteForTask(uint256 _taskId, bytes32 _commitment, uint256 _numvotes) returns(bool)
func (_TaskCore *TaskCoreTransactor) VoteForTask(opts *bind.TransactOpts, _taskId *big.Int, _commitment [32]byte, _numvotes *big.Int) (*types.Transaction, error) {
	return _TaskCore.contract.Transact(opts, "voteForTask", _taskId, _commitment, _numvotes)
}

// VoteForTask is a paid mutator transaction binding the contract method 0x4a9ec1ba.
//
// Solidity: function voteForTask(uint256 _taskId, bytes32 _commitment, uint256 _numvotes) returns(bool)
func (_TaskCore *TaskCoreSession) VoteForTask(_taskId *big.Int, _commitment [32]byte, _numvotes *big.Int) (*types.Transaction, error) {
	return _TaskCore.Contract.VoteForTask(&_TaskCore.TransactOpts, _taskId, _commitment, _numvotes)
}

// VoteForTask is a paid mutator transaction binding the contract method 0x4a9ec1ba.
//
// Solidity: function voteForTask(uint256 _taskId, bytes32 _commitment, uint256 _numvotes) returns(bool)
func (_TaskCore *TaskCoreTransactorSession) VoteForTask(_taskId *big.Int, _commitment [32]byte, _numvotes *big.Int) (*types.Transaction, error) {
	return _TaskCore.Contract.VoteForTask(&_TaskCore.TransactOpts, _taskId, _commitment, _numvotes)
}

// WithdrawTaskReward is a paid mutator transaction binding the contract method 0xf307655b.
//
// Solidity: function withdrawTaskReward(uint256 _taskId) returns(bool)
func (_TaskCore *TaskCoreTransactor) WithdrawTaskReward(opts *bind.TransactOpts, _taskId *big.Int) (*types.Transaction, error) {
	return _TaskCore.contract.Transact(opts, "withdrawTaskReward", _taskId)
}

// WithdrawTaskReward is a paid mutator transaction binding the contract method 0xf307655b.
//
// Solidity: function withdrawTaskReward(uint256 _taskId) returns(bool)
func (_TaskCore *TaskCoreSession) WithdrawTaskReward(_taskId *big.Int) (*types.Transaction, error) {
	return _TaskCore.Contract.WithdrawTaskReward(&_TaskCore.TransactOpts, _taskId)
}

// WithdrawTaskReward is a paid mutator transaction binding the contract method 0xf307655b.
//
// Solidity: function withdrawTaskReward(uint256 _taskId) returns(bool)
func (_TaskCore *TaskCoreTransactorSession) WithdrawTaskReward(_taskId *big.Int) (*types.Transaction, error) {
	return _TaskCore.Contract.WithdrawTaskReward(&_TaskCore.TransactOpts, _taskId)
}

// WithdrawVoteReward is a paid mutator transaction binding the contract method 0x0b39d714.
//
// Solidity: function withdrawVoteReward(uint256 _taskId) returns(bool)
func (_TaskCore *TaskCoreTransactor) WithdrawVoteReward(opts *bind.TransactOpts, _taskId *big.Int) (*types.Transaction, error) {
	return _TaskCore.contract.Transact(opts, "withdrawVoteReward", _taskId)
}

// WithdrawVoteReward is a paid mutator transaction binding the contract method 0x0b39d714.
//
// Solidity: function withdrawVoteReward(uint256 _taskId) returns(bool)
func (_TaskCore *TaskCoreSession) WithdrawVoteReward(_taskId *big.Int) (*types.Transaction, error) {
	return _TaskCore.Contract.WithdrawVoteReward(&_TaskCore.TransactOpts, _taskId)
}

// WithdrawVoteReward is a paid mutator transaction binding the contract method 0x0b39d714.
//
// Solidity: function withdrawVoteReward(uint256 _taskId) returns(bool)
func (_TaskCore *TaskCoreTransactorSession) WithdrawVoteReward(_taskId *big.Int) (*types.Transaction, error) {
	return _TaskCore.Contract.WithdrawVoteReward(&_TaskCore.TransactOpts, _taskId)
}

// WorkerAddDeposit is a paid mutator transaction binding the contract method 0x23c96d38.
//
// Solidity: function workerAddDeposit(uint256 _taskId, string _workerProof) returns()
func (_TaskCore *TaskCoreTransactor) WorkerAddDeposit(opts *bind.TransactOpts, _taskId *big.Int, _workerProof string) (*types.Transaction, error) {
	return _TaskCore.contract.Transact(opts, "workerAddDeposit", _taskId, _workerProof)
}

// WorkerAddDeposit is a paid mutator transaction binding the contract method 0x23c96d38.
//
// Solidity: function workerAddDeposit(uint256 _taskId, string _workerProof) returns()
func (_TaskCore *TaskCoreSession) WorkerAddDeposit(_taskId *big.Int, _workerProof string) (*types.Transaction, error) {
	return _TaskCore.Contract.WorkerAddDeposit(&_TaskCore.TransactOpts, _taskId, _workerProof)
}

// WorkerAddDeposit is a paid mutator transaction binding the contract method 0x23c96d38.
//
// Solidity: function workerAddDeposit(uint256 _taskId, string _workerProof) returns()
func (_TaskCore *TaskCoreTransactorSession) WorkerAddDeposit(_taskId *big.Int, _workerProof string) (*types.Transaction, error) {
	return _TaskCore.Contract.WorkerAddDeposit(&_TaskCore.TransactOpts, _taskId, _workerProof)
}

// TaskCoreAcceptTaskIterator is returned from FilterAcceptTask and is used to iterate over the raw logs and unpacked data for AcceptTask events raised by the TaskCore contract.
type TaskCoreAcceptTaskIterator struct {
	Event *TaskCoreAcceptTask // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskCoreAcceptTaskIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskCoreAcceptTask)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskCoreAcceptTask)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskCoreAcceptTaskIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskCoreAcceptTaskIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskCoreAcceptTask represents a AcceptTask event raised by the TaskCore contract.
type TaskCoreAcceptTask struct {
	Worker common.Address
	TaskId *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterAcceptTask is a free log retrieval operation binding the contract event 0x2ca8d8b2ebfa0f7ff682ecba96d545fb37dfc0165fd1017b71b1bba6a492ab1a.
//
// Solidity: event AcceptTask(address worker, uint256 taskId)
func (_TaskCore *TaskCoreFilterer) FilterAcceptTask(opts *bind.FilterOpts) (*TaskCoreAcceptTaskIterator, error) {

	logs, sub, err := _TaskCore.contract.FilterLogs(opts, "AcceptTask")
	if err != nil {
		return nil, err
	}
	return &TaskCoreAcceptTaskIterator{contract: _TaskCore.contract, event: "AcceptTask", logs: logs, sub: sub}, nil
}

// WatchAcceptTask is a free log subscription operation binding the contract event 0x2ca8d8b2ebfa0f7ff682ecba96d545fb37dfc0165fd1017b71b1bba6a492ab1a.
//
// Solidity: event AcceptTask(address worker, uint256 taskId)
func (_TaskCore *TaskCoreFilterer) WatchAcceptTask(opts *bind.WatchOpts, sink chan<- *TaskCoreAcceptTask) (event.Subscription, error) {

	logs, sub, err := _TaskCore.contract.WatchLogs(opts, "AcceptTask")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskCoreAcceptTask)
				if err := _TaskCore.contract.UnpackLog(event, "AcceptTask", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAcceptTask is a log parse operation binding the contract event 0x2ca8d8b2ebfa0f7ff682ecba96d545fb37dfc0165fd1017b71b1bba6a492ab1a.
//
// Solidity: event AcceptTask(address worker, uint256 taskId)
func (_TaskCore *TaskCoreFilterer) ParseAcceptTask(log types.Log) (*TaskCoreAcceptTask, error) {
	event := new(TaskCoreAcceptTask)
	if err := _TaskCore.contract.UnpackLog(event, "AcceptTask", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TaskCoreAcceptWorkIterator is returned from FilterAcceptWork and is used to iterate over the raw logs and unpacked data for AcceptWork events raised by the TaskCore contract.
type TaskCoreAcceptWorkIterator struct {
	Event *TaskCoreAcceptWork // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskCoreAcceptWorkIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskCoreAcceptWork)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskCoreAcceptWork)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskCoreAcceptWorkIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskCoreAcceptWorkIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskCoreAcceptWork represents a AcceptWork event raised by the TaskCore contract.
type TaskCoreAcceptWork struct {
	User       common.Address
	Acceptwork *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterAcceptWork is a free log retrieval operation binding the contract event 0x8456716deb9a43a5aa4d32abce50e381fd1e5d188f51e00eb727a443cfa042bc.
//
// Solidity: event AcceptWork(address user, uint256 acceptwork)
func (_TaskCore *TaskCoreFilterer) FilterAcceptWork(opts *bind.FilterOpts) (*TaskCoreAcceptWorkIterator, error) {

	logs, sub, err := _TaskCore.contract.FilterLogs(opts, "AcceptWork")
	if err != nil {
		return nil, err
	}
	return &TaskCoreAcceptWorkIterator{contract: _TaskCore.contract, event: "AcceptWork", logs: logs, sub: sub}, nil
}

// WatchAcceptWork is a free log subscription operation binding the contract event 0x8456716deb9a43a5aa4d32abce50e381fd1e5d188f51e00eb727a443cfa042bc.
//
// Solidity: event AcceptWork(address user, uint256 acceptwork)
func (_TaskCore *TaskCoreFilterer) WatchAcceptWork(opts *bind.WatchOpts, sink chan<- *TaskCoreAcceptWork) (event.Subscription, error) {

	logs, sub, err := _TaskCore.contract.WatchLogs(opts, "AcceptWork")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskCoreAcceptWork)
				if err := _TaskCore.contract.UnpackLog(event, "AcceptWork", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAcceptWork is a log parse operation binding the contract event 0x8456716deb9a43a5aa4d32abce50e381fd1e5d188f51e00eb727a443cfa042bc.
//
// Solidity: event AcceptWork(address user, uint256 acceptwork)
func (_TaskCore *TaskCoreFilterer) ParseAcceptWork(log types.Log) (*TaskCoreAcceptWork, error) {
	event := new(TaskCoreAcceptWork)
	if err := _TaskCore.contract.UnpackLog(event, "AcceptWork", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TaskCoreContractUpgradeIterator is returned from FilterContractUpgrade and is used to iterate over the raw logs and unpacked data for ContractUpgrade events raised by the TaskCore contract.
type TaskCoreContractUpgradeIterator struct {
	Event *TaskCoreContractUpgrade // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskCoreContractUpgradeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskCoreContractUpgrade)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskCoreContractUpgrade)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskCoreContractUpgradeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskCoreContractUpgradeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskCoreContractUpgrade represents a ContractUpgrade event raised by the TaskCore contract.
type TaskCoreContractUpgrade struct {
	NewContract common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterContractUpgrade is a free log retrieval operation binding the contract event 0x450db8da6efbe9c22f2347f7c2021231df1fc58d3ae9a2fa75d39fa446199305.
//
// Solidity: event ContractUpgrade(address newContract)
func (_TaskCore *TaskCoreFilterer) FilterContractUpgrade(opts *bind.FilterOpts) (*TaskCoreContractUpgradeIterator, error) {

	logs, sub, err := _TaskCore.contract.FilterLogs(opts, "ContractUpgrade")
	if err != nil {
		return nil, err
	}
	return &TaskCoreContractUpgradeIterator{contract: _TaskCore.contract, event: "ContractUpgrade", logs: logs, sub: sub}, nil
}

// WatchContractUpgrade is a free log subscription operation binding the contract event 0x450db8da6efbe9c22f2347f7c2021231df1fc58d3ae9a2fa75d39fa446199305.
//
// Solidity: event ContractUpgrade(address newContract)
func (_TaskCore *TaskCoreFilterer) WatchContractUpgrade(opts *bind.WatchOpts, sink chan<- *TaskCoreContractUpgrade) (event.Subscription, error) {

	logs, sub, err := _TaskCore.contract.WatchLogs(opts, "ContractUpgrade")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskCoreContractUpgrade)
				if err := _TaskCore.contract.UnpackLog(event, "ContractUpgrade", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContractUpgrade is a log parse operation binding the contract event 0x450db8da6efbe9c22f2347f7c2021231df1fc58d3ae9a2fa75d39fa446199305.
//
// Solidity: event ContractUpgrade(address newContract)
func (_TaskCore *TaskCoreFilterer) ParseContractUpgrade(log types.Log) (*TaskCoreContractUpgrade, error) {
	event := new(TaskCoreContractUpgrade)
	if err := _TaskCore.contract.UnpackLog(event, "ContractUpgrade", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TaskCoreCreateTaskIterator is returned from FilterCreateTask and is used to iterate over the raw logs and unpacked data for CreateTask events raised by the TaskCore contract.
type TaskCoreCreateTaskIterator struct {
	Event *TaskCoreCreateTask // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskCoreCreateTaskIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskCoreCreateTask)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskCoreCreateTask)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskCoreCreateTaskIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskCoreCreateTaskIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskCoreCreateTask represents a CreateTask event raised by the TaskCore contract.
type TaskCoreCreateTask struct {
	Creator common.Address
	TaskId  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterCreateTask is a free log retrieval operation binding the contract event 0xe106c44ddc9830db541afe96867b5528824d1357fcae863825b977d872ebc331.
//
// Solidity: event CreateTask(address creator, uint256 taskId)
func (_TaskCore *TaskCoreFilterer) FilterCreateTask(opts *bind.FilterOpts) (*TaskCoreCreateTaskIterator, error) {

	logs, sub, err := _TaskCore.contract.FilterLogs(opts, "CreateTask")
	if err != nil {
		return nil, err
	}
	return &TaskCoreCreateTaskIterator{contract: _TaskCore.contract, event: "CreateTask", logs: logs, sub: sub}, nil
}

// WatchCreateTask is a free log subscription operation binding the contract event 0xe106c44ddc9830db541afe96867b5528824d1357fcae863825b977d872ebc331.
//
// Solidity: event CreateTask(address creator, uint256 taskId)
func (_TaskCore *TaskCoreFilterer) WatchCreateTask(opts *bind.WatchOpts, sink chan<- *TaskCoreCreateTask) (event.Subscription, error) {

	logs, sub, err := _TaskCore.contract.WatchLogs(opts, "CreateTask")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskCoreCreateTask)
				if err := _TaskCore.contract.UnpackLog(event, "CreateTask", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateTask is a log parse operation binding the contract event 0xe106c44ddc9830db541afe96867b5528824d1357fcae863825b977d872ebc331.
//
// Solidity: event CreateTask(address creator, uint256 taskId)
func (_TaskCore *TaskCoreFilterer) ParseCreateTask(log types.Log) (*TaskCoreCreateTask, error) {
	event := new(TaskCoreCreateTask)
	if err := _TaskCore.contract.UnpackLog(event, "CreateTask", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TaskCoreFinishWorkIterator is returned from FilterFinishWork and is used to iterate over the raw logs and unpacked data for FinishWork events raised by the TaskCore contract.
type TaskCoreFinishWorkIterator struct {
	Event *TaskCoreFinishWork // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskCoreFinishWorkIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskCoreFinishWork)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskCoreFinishWork)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskCoreFinishWorkIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskCoreFinishWorkIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskCoreFinishWork represents a FinishWork event raised by the TaskCore contract.
type TaskCoreFinishWork struct {
	User         common.Address
	Finishedwork *big.Int
	Workscore    *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterFinishWork is a free log retrieval operation binding the contract event 0xbc6498a0a3d78c92e20e62195917f11934518d0e3c93426d306ddf1ef7b957be.
//
// Solidity: event FinishWork(address user, uint256 finishedwork, uint256 workscore)
func (_TaskCore *TaskCoreFilterer) FilterFinishWork(opts *bind.FilterOpts) (*TaskCoreFinishWorkIterator, error) {

	logs, sub, err := _TaskCore.contract.FilterLogs(opts, "FinishWork")
	if err != nil {
		return nil, err
	}
	return &TaskCoreFinishWorkIterator{contract: _TaskCore.contract, event: "FinishWork", logs: logs, sub: sub}, nil
}

// WatchFinishWork is a free log subscription operation binding the contract event 0xbc6498a0a3d78c92e20e62195917f11934518d0e3c93426d306ddf1ef7b957be.
//
// Solidity: event FinishWork(address user, uint256 finishedwork, uint256 workscore)
func (_TaskCore *TaskCoreFilterer) WatchFinishWork(opts *bind.WatchOpts, sink chan<- *TaskCoreFinishWork) (event.Subscription, error) {

	logs, sub, err := _TaskCore.contract.WatchLogs(opts, "FinishWork")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskCoreFinishWork)
				if err := _TaskCore.contract.UnpackLog(event, "FinishWork", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFinishWork is a log parse operation binding the contract event 0xbc6498a0a3d78c92e20e62195917f11934518d0e3c93426d306ddf1ef7b957be.
//
// Solidity: event FinishWork(address user, uint256 finishedwork, uint256 workscore)
func (_TaskCore *TaskCoreFilterer) ParseFinishWork(log types.Log) (*TaskCoreFinishWork, error) {
	event := new(TaskCoreFinishWork)
	if err := _TaskCore.contract.UnpackLog(event, "FinishWork", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TaskCoreProposeToVoteIterator is returned from FilterProposeToVote and is used to iterate over the raw logs and unpacked data for ProposeToVote events raised by the TaskCore contract.
type TaskCoreProposeToVoteIterator struct {
	Event *TaskCoreProposeToVote // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskCoreProposeToVoteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskCoreProposeToVote)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskCoreProposeToVote)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskCoreProposeToVoteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskCoreProposeToVoteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskCoreProposeToVote represents a ProposeToVote event raised by the TaskCore contract.
type TaskCoreProposeToVote struct {
	TaskId *big.Int
	Vote   common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterProposeToVote is a free log retrieval operation binding the contract event 0x5a0bd4a18fbaced3c711532498d9ad92e848490da3c7697052b1556224f9b9f9.
//
// Solidity: event ProposeToVote(uint256 taskId, address vote)
func (_TaskCore *TaskCoreFilterer) FilterProposeToVote(opts *bind.FilterOpts) (*TaskCoreProposeToVoteIterator, error) {

	logs, sub, err := _TaskCore.contract.FilterLogs(opts, "ProposeToVote")
	if err != nil {
		return nil, err
	}
	return &TaskCoreProposeToVoteIterator{contract: _TaskCore.contract, event: "ProposeToVote", logs: logs, sub: sub}, nil
}

// WatchProposeToVote is a free log subscription operation binding the contract event 0x5a0bd4a18fbaced3c711532498d9ad92e848490da3c7697052b1556224f9b9f9.
//
// Solidity: event ProposeToVote(uint256 taskId, address vote)
func (_TaskCore *TaskCoreFilterer) WatchProposeToVote(opts *bind.WatchOpts, sink chan<- *TaskCoreProposeToVote) (event.Subscription, error) {

	logs, sub, err := _TaskCore.contract.WatchLogs(opts, "ProposeToVote")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskCoreProposeToVote)
				if err := _TaskCore.contract.UnpackLog(event, "ProposeToVote", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProposeToVote is a log parse operation binding the contract event 0x5a0bd4a18fbaced3c711532498d9ad92e848490da3c7697052b1556224f9b9f9.
//
// Solidity: event ProposeToVote(uint256 taskId, address vote)
func (_TaskCore *TaskCoreFilterer) ParseProposeToVote(log types.Log) (*TaskCoreProposeToVote, error) {
	event := new(TaskCoreProposeToVote)
	if err := _TaskCore.contract.UnpackLog(event, "ProposeToVote", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TaskCoreRegisterUserIterator is returned from FilterRegisterUser and is used to iterate over the raw logs and unpacked data for RegisterUser events raised by the TaskCore contract.
type TaskCoreRegisterUserIterator struct {
	Event *TaskCoreRegisterUser // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskCoreRegisterUserIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskCoreRegisterUser)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskCoreRegisterUser)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskCoreRegisterUserIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskCoreRegisterUserIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskCoreRegisterUser represents a RegisterUser event raised by the TaskCore contract.
type TaskCoreRegisterUser struct {
	User common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterRegisterUser is a free log retrieval operation binding the contract event 0x39e88f253dc4ea790c2b355aec8c5ac86335a9925c3815b62b74bcdfaffe68ec.
//
// Solidity: event RegisterUser(address user)
func (_TaskCore *TaskCoreFilterer) FilterRegisterUser(opts *bind.FilterOpts) (*TaskCoreRegisterUserIterator, error) {

	logs, sub, err := _TaskCore.contract.FilterLogs(opts, "RegisterUser")
	if err != nil {
		return nil, err
	}
	return &TaskCoreRegisterUserIterator{contract: _TaskCore.contract, event: "RegisterUser", logs: logs, sub: sub}, nil
}

// WatchRegisterUser is a free log subscription operation binding the contract event 0x39e88f253dc4ea790c2b355aec8c5ac86335a9925c3815b62b74bcdfaffe68ec.
//
// Solidity: event RegisterUser(address user)
func (_TaskCore *TaskCoreFilterer) WatchRegisterUser(opts *bind.WatchOpts, sink chan<- *TaskCoreRegisterUser) (event.Subscription, error) {

	logs, sub, err := _TaskCore.contract.WatchLogs(opts, "RegisterUser")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskCoreRegisterUser)
				if err := _TaskCore.contract.UnpackLog(event, "RegisterUser", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegisterUser is a log parse operation binding the contract event 0x39e88f253dc4ea790c2b355aec8c5ac86335a9925c3815b62b74bcdfaffe68ec.
//
// Solidity: event RegisterUser(address user)
func (_TaskCore *TaskCoreFilterer) ParseRegisterUser(log types.Log) (*TaskCoreRegisterUser, error) {
	event := new(TaskCoreRegisterUser)
	if err := _TaskCore.contract.UnpackLog(event, "RegisterUser", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TaskCoreSettlementTaskIterator is returned from FilterSettlementTask and is used to iterate over the raw logs and unpacked data for SettlementTask events raised by the TaskCore contract.
type TaskCoreSettlementTaskIterator struct {
	Event *TaskCoreSettlementTask // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskCoreSettlementTaskIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskCoreSettlementTask)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskCoreSettlementTask)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskCoreSettlementTaskIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskCoreSettlementTaskIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskCoreSettlementTask represents a SettlementTask event raised by the TaskCore contract.
type TaskCoreSettlementTask struct {
	TaskId *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSettlementTask is a free log retrieval operation binding the contract event 0x86fc46012ecb8f2e23642ea6bc26d510db89e1e5224e88730ce8933ff5be0821.
//
// Solidity: event SettlementTask(uint256 taskId)
func (_TaskCore *TaskCoreFilterer) FilterSettlementTask(opts *bind.FilterOpts) (*TaskCoreSettlementTaskIterator, error) {

	logs, sub, err := _TaskCore.contract.FilterLogs(opts, "SettlementTask")
	if err != nil {
		return nil, err
	}
	return &TaskCoreSettlementTaskIterator{contract: _TaskCore.contract, event: "SettlementTask", logs: logs, sub: sub}, nil
}

// WatchSettlementTask is a free log subscription operation binding the contract event 0x86fc46012ecb8f2e23642ea6bc26d510db89e1e5224e88730ce8933ff5be0821.
//
// Solidity: event SettlementTask(uint256 taskId)
func (_TaskCore *TaskCoreFilterer) WatchSettlementTask(opts *bind.WatchOpts, sink chan<- *TaskCoreSettlementTask) (event.Subscription, error) {

	logs, sub, err := _TaskCore.contract.WatchLogs(opts, "SettlementTask")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskCoreSettlementTask)
				if err := _TaskCore.contract.UnpackLog(event, "SettlementTask", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSettlementTask is a log parse operation binding the contract event 0x86fc46012ecb8f2e23642ea6bc26d510db89e1e5224e88730ce8933ff5be0821.
//
// Solidity: event SettlementTask(uint256 taskId)
func (_TaskCore *TaskCoreFilterer) ParseSettlementTask(log types.Log) (*TaskCoreSettlementTask, error) {
	event := new(TaskCoreSettlementTask)
	if err := _TaskCore.contract.UnpackLog(event, "SettlementTask", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TaskCoreSubmitTaskResultIterator is returned from FilterSubmitTaskResult and is used to iterate over the raw logs and unpacked data for SubmitTaskResult events raised by the TaskCore contract.
type TaskCoreSubmitTaskResultIterator struct {
	Event *TaskCoreSubmitTaskResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskCoreSubmitTaskResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskCoreSubmitTaskResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskCoreSubmitTaskResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskCoreSubmitTaskResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskCoreSubmitTaskResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskCoreSubmitTaskResult represents a SubmitTaskResult event raised by the TaskCore contract.
type TaskCoreSubmitTaskResult struct {
	Requester  common.Address
	Worker     common.Address
	TaskId     *big.Int
	ResultHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSubmitTaskResult is a free log retrieval operation binding the contract event 0xd16e1b4933a2b42802dd3a6ee3f5d017a655f5b0059a8a777287ee5855525d64.
//
// Solidity: event SubmitTaskResult(address requester, address worker, uint256 taskId, string resultHash)
func (_TaskCore *TaskCoreFilterer) FilterSubmitTaskResult(opts *bind.FilterOpts) (*TaskCoreSubmitTaskResultIterator, error) {

	logs, sub, err := _TaskCore.contract.FilterLogs(opts, "SubmitTaskResult")
	if err != nil {
		return nil, err
	}
	return &TaskCoreSubmitTaskResultIterator{contract: _TaskCore.contract, event: "SubmitTaskResult", logs: logs, sub: sub}, nil
}

// WatchSubmitTaskResult is a free log subscription operation binding the contract event 0xd16e1b4933a2b42802dd3a6ee3f5d017a655f5b0059a8a777287ee5855525d64.
//
// Solidity: event SubmitTaskResult(address requester, address worker, uint256 taskId, string resultHash)
func (_TaskCore *TaskCoreFilterer) WatchSubmitTaskResult(opts *bind.WatchOpts, sink chan<- *TaskCoreSubmitTaskResult) (event.Subscription, error) {

	logs, sub, err := _TaskCore.contract.WatchLogs(opts, "SubmitTaskResult")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskCoreSubmitTaskResult)
				if err := _TaskCore.contract.UnpackLog(event, "SubmitTaskResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSubmitTaskResult is a log parse operation binding the contract event 0xd16e1b4933a2b42802dd3a6ee3f5d017a655f5b0059a8a777287ee5855525d64.
//
// Solidity: event SubmitTaskResult(address requester, address worker, uint256 taskId, string resultHash)
func (_TaskCore *TaskCoreFilterer) ParseSubmitTaskResult(log types.Log) (*TaskCoreSubmitTaskResult, error) {
	event := new(TaskCoreSubmitTaskResult)
	if err := _TaskCore.contract.UnpackLog(event, "SubmitTaskResult", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TaskCoreWorkerAddDepositIterator is returned from FilterWorkerAddDeposit and is used to iterate over the raw logs and unpacked data for WorkerAddDeposit events raised by the TaskCore contract.
type TaskCoreWorkerAddDepositIterator struct {
	Event *TaskCoreWorkerAddDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TaskCoreWorkerAddDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TaskCoreWorkerAddDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TaskCoreWorkerAddDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TaskCoreWorkerAddDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TaskCoreWorkerAddDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TaskCoreWorkerAddDeposit represents a WorkerAddDeposit event raised by the TaskCore contract.
type TaskCoreWorkerAddDeposit struct {
	TaskId *big.Int
	Vote   common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWorkerAddDeposit is a free log retrieval operation binding the contract event 0xa9f21dcdaf18685f0d457d8d4be1d8cb8bb4fb91ad213d6e8669527abd4f6609.
//
// Solidity: event WorkerAddDeposit(uint256 taskId, address vote)
func (_TaskCore *TaskCoreFilterer) FilterWorkerAddDeposit(opts *bind.FilterOpts) (*TaskCoreWorkerAddDepositIterator, error) {

	logs, sub, err := _TaskCore.contract.FilterLogs(opts, "WorkerAddDeposit")
	if err != nil {
		return nil, err
	}
	return &TaskCoreWorkerAddDepositIterator{contract: _TaskCore.contract, event: "WorkerAddDeposit", logs: logs, sub: sub}, nil
}

// WatchWorkerAddDeposit is a free log subscription operation binding the contract event 0xa9f21dcdaf18685f0d457d8d4be1d8cb8bb4fb91ad213d6e8669527abd4f6609.
//
// Solidity: event WorkerAddDeposit(uint256 taskId, address vote)
func (_TaskCore *TaskCoreFilterer) WatchWorkerAddDeposit(opts *bind.WatchOpts, sink chan<- *TaskCoreWorkerAddDeposit) (event.Subscription, error) {

	logs, sub, err := _TaskCore.contract.WatchLogs(opts, "WorkerAddDeposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TaskCoreWorkerAddDeposit)
				if err := _TaskCore.contract.UnpackLog(event, "WorkerAddDeposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWorkerAddDeposit is a log parse operation binding the contract event 0xa9f21dcdaf18685f0d457d8d4be1d8cb8bb4fb91ad213d6e8669527abd4f6609.
//
// Solidity: event WorkerAddDeposit(uint256 taskId, address vote)
func (_TaskCore *TaskCoreFilterer) ParseWorkerAddDeposit(log types.Log) (*TaskCoreWorkerAddDeposit, error) {
	event := new(TaskCoreWorkerAddDeposit)
	if err := _TaskCore.contract.UnpackLog(event, "WorkerAddDeposit", log); err != nil {
		return nil, err
	}
	return event, nil
}
